{"version":3,"file":"static/js/824.e34779e4.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","redux/selectors.js","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","webpack://react-homework-template/./src/pages/Contacts.module.css?8552","webpack://react-homework-template/./src/components/Loader/Loader.module.css?d03f","components/Loader/Loader.jsx","pages/Contacts.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"button__add\":\"ContactForm_button__add__wICI6\",\"input__name\":\"ContactForm_input__name__qXzWu\",\"input__number\":\"ContactForm_input__number__IaILQ\"};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectStatusFilter = state => state.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectIsLoggedIn = state => state.auth.isLoggedIn;\nexport const selectUser = state => state.auth.user;\nexport const selectIsRefreshing = state => state.auth.isRefreshing;\nexport const selectIsFetching = state => state.auth.isFetching;\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectStatusFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport css from './ContactForm.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/selectors';\n\nconst nameInputId = nanoid();\nconst numberInputId = nanoid();\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const isInContacts = contacts.some(\n      contact => contact.name.toLowerCase().trim() === name.toLowerCase().trim()\n    );\n\n    if (isInContacts) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n\n    dispatch(addContact({ name, number }));\n    setName('');\n    setNumber('');\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={css.form}>\n      <label htmlFor={nameInputId} className={css.label}>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          className={css.input__name}\n        />\n      </label>\n\n      <label htmlFor={numberInputId} className={css.label}>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[\\-.\\s]?\\(?\\d{1,3}?\\)?[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          className={css.input__number}\n        />\n      </label>\n\n      <button type=\"submit\" className={css.button__add}>\n        Add contact\n      </button>\n    </form>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ContactList_container__hYHc3\",\"contact__ul\":\"ContactList_contact__ul__Xu0eo\",\"contact__list\":\"ContactList_contact__list__2jNwc\",\"icon__contact\":\"ContactList_icon__contact__QpiG4\",\"delete__contact\":\"ContactList_delete__contact__uf8+c\",\"icon__close\":\"ContactList_icon__close__IrVdM\"};","import React from 'react';\nimport { RiContactsFill } from 'react-icons/ri';\nimport { AiFillCloseCircle } from 'react-icons/ai';\nimport shortid from 'shortid';\nimport { useSelector, useDispatch } from 'react-redux';\nimport css from './ContactList.module.css';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { selectVisibleContacts } from 'redux/selectors';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <div className={css.container}>\n      <ul className={css.contact__ul}>\n        {contacts.map(contact => (\n          <li key={shortid.generate()} className={css.contact__list}>\n            <RiContactsFill className={css.icon__contact} />\n            {contact.name} : {contact.number}{' '}\n            <button\n              type=\"button\"\n              onClick={() => dispatch(deleteContact(contact.id))}\n              className={css.delete__contact}\n            >\n              <span className={css.icon__close}>\n                <AiFillCloseCircle />\n              </span>\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { setFilter } from 'redux/filter/filterSlice';\nimport { selectStatusFilter } from 'redux/selectors';\n\nexport default function Filter() {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectStatusFilter);\n\n  const onChange = e => {\n    dispatch(setFilter(e.target.value.toLowerCase()));\n  };\n  return (\n    <input\n      type=\"text\"\n      value={filter}\n      onChange={onChange}\n      placeholder=\"Search contacts\"\n    />\n  );\n}\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n  OnChange: PropTypes.func,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"phonebook__app\":\"Contacts_phonebook__app__0vW0T\",\"runningLine\":\"Contacts_runningLine__UCR2G\",\"contacts\":\"Contacts_contacts__LNvgJ\"};","// extracted by mini-css-extract-plugin\nexport default {\"Loader\":\"Loader_Loader__wqo9C\"};","import React from 'react';\nimport { CircleLoader } from 'react-spinners';\nimport css from './Loader.module.css';\n\nconst Loader = () => (\n  <div className={css.Loader}>\n    <CircleLoader size={80} color=\"blue\" loading={true} />\n  </div>\n);\n\nexport default Loader;\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectError, selectIsLoading, selectContacts } from 'redux/selectors';\nimport css from './Contacts.module.css';\nimport Loader from 'components/Loader/Loader';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const contacts = useSelector(selectContacts);\n  const [showEmptyMessage, setShowEmptyMessage] = useState(false);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (!isLoading && contacts.length === 0) {\n      const timer = setTimeout(() => {\n        setShowEmptyMessage(true);\n      }, 300);\n\n      return () => clearTimeout(timer);\n    }\n  }, [isLoading, contacts.length]);\n\n  return (\n    <div className={css.contacts}>\n      <ContactForm />\n      <h2 className={css.phonebook__app}>Contacts</h2>\n      {isLoading && <Loader />}\n      {contacts.length > 0 && <Filter />}\n      {contacts.length === 0 && showEmptyMessage && (\n        <p>Your phonebook is empty. Add first contact!</p>\n      )}\n      {contacts.length > 0 && !isLoading && error !== null && (\n        <p>Error occurred while loading contacts. Please try again.</p>\n      )}\n      {contacts.length > 0 && <ContactList />}\n    </div>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectStatusFilter","filter","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","contact","name","toLowerCase","includes","nameInputId","nanoid","numberInputId","ContactForm","useState","setName","number","setNumber","useSelector","dispatch","useDispatch","handleChange","event","target","value","onSubmit","preventDefault","some","trim","alert","addContact","className","css","htmlFor","type","onChange","pattern","title","required","ContactList","map","onClick","deleteContact","id","shortid","Filter","e","setFilter","placeholder","CircleLoader","size","color","loading","Contacts","showEmptyMessage","setShowEmptyMessage","useEffect","fetchContacts","length","timer","setTimeout","clearTimeout"],"sourceRoot":""}